import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { motion } from 'framer-motion';
import { 
  ArrowLeft, 
  FileText, 
  Calendar, 
  DollarSign, 
  TrendingUp,
  Download,
  Filter,
  Search,
  ChevronUp,
  ChevronDown,
  Loader2,
  AlertCircle,
  Clock
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import api from '@/lib/api';
import { toast } from '@/components/ui/use-toast';
import Swal from 'sweetalert2';

const CheckerInstallmentReport = ({ onBack, checker }) => {
  const [sortField, setSortField] = useState('contract');
  const [sortDirection, setSortDirection] = useState('asc');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedMonth, setSelectedMonth] = useState('');
  const [selectedYear, setSelectedYear] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [installments, setInstallments] = useState([]);
  const [summary, setSummary] = useState({});
  const [monthlyData, setMonthlyData] = useState({});
  const [refreshKey, setRefreshKey] = useState(0);
  const [selectedContractFilter, setSelectedContractFilter] = useState('');


  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ P ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const calculatePStatus = useCallback((dueDate) => {
    if (!dueDate || dueDate === '-') return { pBlack: 0, pBlue: 0 };
    
    try {
      const date = new Date(dueDate);
      if (isNaN(date.getTime())) return { pBlack: 0, pBlue: 0 };
      
      const currentDate = new Date();
      const currentMonth = currentDate.getMonth() + 1;
      const currentYear = currentDate.getFullYear();
      const dueMonth = date.getMonth() + 1;
      const dueYear = date.getFullYear();
      
      console.log('CalculatePStatus Debug:', {
        dueDate,
        dueMonth,
        dueYear,
        currentMonth,
        currentYear,
        today: currentDate.getDate(),
        dueDay: date.getDate()
      });
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (dueMonth === currentMonth && dueYear === currentYear) {
        // ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô - ‡πÅ‡∏™‡∏î‡∏á P ‡∏î‡∏≥ = "P", P ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô = "1"
        console.log('‚úÖ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô - P ‡∏î‡∏≥ = "P", P ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô = "1"');
        return { pBlack: "P", pBlue: "1" };
      } else if (dueMonth < currentMonth || dueYear < currentYear) {
        // ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤) - ‡πÅ‡∏™‡∏î‡∏á P ‡∏î‡∏≥ = "P", P ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô = "1"
        console.log('‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß - P ‡∏î‡∏≥ = "P", P ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô = "1"');
        return { pBlack: "P", pBlue: "1" };
      } else {
        // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï) - ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á P
        console.log('üìÖ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞ - P ‡∏î‡∏≥ = 0, P ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô = 0');
        return { pBlack: 0, pBlue: 0 };
      }
    } catch (error) {
      console.error('Error calculating P status:', error);
      return { pBlack: 0, pBlue: 0 };
    }
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
  const fetchMonthlyData = useCallback(async () => {
    try {
      const response = await api.get(`/installments`);
      
      let installmentsData = [];
      if (response.data?.success) {
        installmentsData = response.data.data || [];
      } else if (Array.isArray(response.data)) {
        installmentsData = response.data;
      }
      
      if (!Array.isArray(installmentsData)) {
        console.error('installmentsData is not an array:', installmentsData);
        return;
      }

      const filteredData = installmentsData.filter(item => 
        item.inspectorId === checker?.id || item.inspectorId === parseInt(checker?.id)
      );

      const uniqueData = filteredData.filter((item, index, self) => 
        index === self.findIndex(t => t.id === item.id)
      );

      const monthly = {};
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
      for (const item of uniqueData) {
        try {
          const paymentsResponse = await api.get(`/installments/${item.id}/payments`);
          if (paymentsResponse.data?.success && paymentsResponse.data.data) {
            const payments = paymentsResponse.data.data;
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
            const totalContractAmount = payments.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);
            const totalPaidAmount = payments.filter(p => p.status === 'paid').reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);
            const actualRemainingDebt = totalContractAmount - totalPaidAmount;
            
            // ‡∏´‡∏≤‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            const currentDate = new Date();
            const currentMonth = currentDate.getMonth() + 1;
            const currentYear = currentDate.getFullYear();
            
            // ‡∏´‡∏≤‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            const currentMonthPayments = payments.filter(payment => {
              const dueDate = new Date(payment.dueDate);
              return dueDate.getMonth() + 1 === currentMonth && dueDate.getFullYear() === currentYear;
            });
            
            if (currentMonthPayments.length > 0) {
              // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
              for (const payment of currentMonthPayments) {
                const dueDate = payment.dueDate;
                const date = new Date(dueDate);
                
                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
                const monthName = date.toLocaleDateString('th-TH', { 
                  year: 'numeric', 
                  month: 'long' 
                });
                
                if (!monthly[monthKey]) {
                  monthly[monthKey] = {
                    monthName,
                    monthKey,
                    installments: [],
                    totalAmount: 0,
                    totalCollected: 0,
                    totalRemaining: 0
                  };
                }
                
                const amount = parseFloat(payment.amount) || 0;
                const amountCollected = payment.status === 'paid' ? amount : 0;
                const napheoBlue = payment.status === 'paid' ? 1 : 0;
                const collectionDateStr = date.toLocaleDateString('th-TH');
                const pStatus = calculatePStatus(dueDate);
                
                // Debug: Log P status calculation
                console.log('P Status Debug:', {
                  contract: item.contractNumber,
                  paymentId: payment.id,
                  dueDate: dueDate,
                  pStatus: pStatus,
                  status: payment.status,
                  actualRemainingDebt: actualRemainingDebt,
                  currentDate: new Date().toLocaleDateString('th-TH'),
                  currentMonth: currentMonth,
                  currentYear: currentYear
                });
                
                monthly[monthKey].installments.push({
                  id: `${item.id}-${payment.id}`,
                  contract: item.contractNumber || `C${item.id}`,
                  name: item.customerFullName || `${item.customerName || ''} ${item.customerSurname || ''}`.trim(),
                  collectionDate: collectionDateStr,
                  amountToCollect: amount,
                  amountCollected: amountCollected,
                  remainingDebt: actualRemainingDebt, // ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
                  napheoRed: 0,
                  napheoBlue: napheoBlue, // 1 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                  pBlack: pStatus.pBlack, // "P" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö
                  pRed: 0,
                  pBlue: pStatus.pBlue, // "1" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö
                  paymentStatus: payment.status
                });
                
                monthly[monthKey].totalAmount += amount;
                monthly[monthKey].totalCollected += amountCollected;
                monthly[monthKey].totalRemaining += actualRemainingDebt;
              }
            }
          }
        } catch (error) {
          console.error('Error fetching payments for installment:', item.id, error);
        }
      }

      const sortedMonths = Object.keys(monthly).sort();
      const sortedMonthlyData = {};
      sortedMonths.forEach(monthKey => {
        sortedMonthlyData[monthKey] = monthly[monthKey];
      });

      setMonthlyData(sortedMonthlyData);
      
    } catch (error) {
      console.error('Error fetching monthly data:', error);
      toast({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ',
        variant: 'destructive',
      });
    }
  }, [checker?.id, calculatePStatus]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleRefresh = useCallback(() => {
    setRefreshKey(prev => prev + 1);
    setLoading(true);
    setError(null);
  }, []);



  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö localStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  useEffect(() => {
    const selectedContract = localStorage.getItem('selectedContractForChecker');
    if (selectedContract) {
      setSelectedContractFilter(selectedContract);
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å localStorage ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
      localStorage.removeItem('selectedContractForChecker');
      
      // ‡πÅ‡∏™‡∏î‡∏á Swal ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤
      Swal.fire({
        icon: 'info',
        title: '‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤',
        html: `
          <div class="text-left">
            <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤</p>
            <p><strong>${selectedContract}</strong></p>
          </div>
        `,
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
        confirmButtonColor: '#7c3aed'
      });
    }
  }, []);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const response = await api.get(`/installments`);
        
        let installmentsData = [];
        if (response.data?.success) {
          installmentsData = response.data.data || [];
        } else if (Array.isArray(response.data)) {
          installmentsData = response.data;
        }
        
        if (!Array.isArray(installmentsData)) {
          throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Array');
        }
        
        const filteredData = installmentsData.filter(item => {
          return item.inspectorId === checker?.id || item.inspectorId === parseInt(checker?.id);
        });
        
        const uniqueData = filteredData.filter((item, index, self) => 
          index === self.findIndex(t => t.id === item.id)
        );
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ installment
        const processedData = [];
        for (let index = 0; index < uniqueData.length; index++) {
          const item = uniqueData[index];
          const collectionDate = item.dueDate || item.collectionDate;
          let formattedDate = '-';
          
          if (collectionDate) {
            try {
              const date = new Date(collectionDate);
              if (!isNaN(date.getTime())) {
                formattedDate = date.toLocaleDateString('th-TH');
              }
            } catch (error) {
              console.error('Error parsing date:', collectionDate, error);
            }
          }
          
          const pStatus = calculatePStatus(collectionDate);
          
          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö installment ‡∏ô‡∏µ‡πâ
          let amountCollected = 0;
          let napheoBlue = 0;
          let paymentStatus = 'pending';
          
          try {
            const paymentsResponse = await api.get(`/installments/${item.id}/payments`);
            if (paymentsResponse.data?.success && paymentsResponse.data.data) {
              const payments = paymentsResponse.data.data;
              amountCollected = payments.reduce((sum, payment) => sum + parseFloat(payment.amount || 0), 0);
              
              // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ napheoBlue = 1
              if (amountCollected > 0) {
                napheoBlue = 1;
                paymentStatus = 'paid';
              }
            }
          } catch (error) {
            console.error('Error fetching payments for installment:', item.id, error);
          }
          
          processedData.push({
            id: item.id,
            sequence: index + 1,
            contract: item.contractNumber || `C${item.id}`,
            name: item.customerFullName || `${item.customerName || ''} ${item.customerSurname || ''}`.trim(),
            collectionDate: formattedDate,
            amountToCollect: parseFloat(item.installmentAmount) || 0,
            amountCollected: amountCollected,
            remainingDebt: parseFloat(item.remainingAmount) || 0, // ‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ = ‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ú‡πà‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            napheoRed: 0,
            napheoBlue: napheoBlue, // ‡πÄ‡∏û‡∏¥‡πà‡∏° napheoBlue
            pBlack: pStatus.pBlack,
            pRed: 0,
            pBlue: pStatus.pBlue,
            paymentStatus: paymentStatus
          });
        }
        
        setInstallments(processedData);
        
        const totalPBlack = processedData.reduce((sum, item) => {
          // ‡∏ñ‡πâ‡∏≤ pBlack ‡πÄ‡∏õ‡πá‡∏ô "P" ‡∏´‡∏£‡∏∑‡∏≠ 1 ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 1
          if (item.pBlack === "P" || item.pBlack === 1) return sum + 1;
          return sum;
        }, 0);
        const totalPBlue = processedData.reduce((sum, item) => {
          // ‡∏ñ‡πâ‡∏≤ pBlue ‡πÄ‡∏õ‡πá‡∏ô "1" ‡∏´‡∏£‡∏∑‡∏≠ 1 ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 1
          if (item.pBlue === "1" || item.pBlue === 1) return sum + 1;
          return sum;
        }, 0);
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á payments
        let totalRemainingAmount = 0;
        let totalAmountCollected = 0;
        let cardsCollected = 0;
        let napheoBlueCollected = 0;
        
        for (const item of processedData) {
          try {
            const paymentsResponse = await api.get(`/installments/${item.id}/payments`);
            if (paymentsResponse.data?.success && paymentsResponse.data.data) {
              const payments = paymentsResponse.data.data;
              
              // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á
              const totalContractAmount = payments.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);
              const totalPaidAmount = payments.filter(p => p.status === 'paid').reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);
              const actualRemainingDebt = totalContractAmount - totalPaidAmount;
              
              totalRemainingAmount += actualRemainingDebt;
              totalAmountCollected += totalPaidAmount;
              
              if (totalPaidAmount > 0) {
                cardsCollected++;
                napheoBlueCollected++;
              }
            }
          } catch (error) {
            console.error('Error calculating remaining amount for installment:', item.id, error);
          }
        }
        
        const summaryData = {
          totalCards: processedData.length,
          cardsToCollect: processedData.length,
          cardsCollected: cardsCollected,
          pGreen: totalPBlue,
          pRed: totalPBlack,
          totalPCards: totalPBlack + totalPBlue,
          pGreenCollected: napheoBlueCollected,
          pRedCollected: 0,
          totalPCardsCollected: napheoBlueCollected,
          totalMoney: totalRemainingAmount, // ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          moneyToCollect: totalRemainingAmount, // ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö totalMoney)
          moneyCollected: totalAmountCollected
        };
        
        setSummary(summaryData);
        
        await fetchMonthlyData();
        
      } catch (error) {
        console.error('Error fetching installments:', error);
        setError(error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
        
        toast({
          title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          description: error.response?.data?.message || error.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ',
          variant: 'destructive',
        });
        
        setInstallments([]);
        setSummary({
          totalCards: 0,
          cardsToCollect: 0,
          cardsCollected: 0,
          pGreen: 0,
          pRed: 0,
          totalPCards: 0,
          pGreenCollected: 0,
          pRedCollected: 0,
          totalPCardsCollected: 0,
          totalMoney: 0,
          moneyToCollect: 0,
          moneyCollected: 0
        });
      } finally {
        setLoading(false);
      }
    };

    if (checker?.id) {
      fetchData();
    }
  }, [checker?.id, selectedMonth, refreshKey, fetchMonthlyData, calculatePStatus]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
  const handleSort = useCallback((field) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  }, [sortField, sortDirection]);

  const getSortIcon = useCallback((field) => {
    if (sortField !== field) return null;
    return sortDirection === 'asc' ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />;
  }, [sortField, sortDirection]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const filteredData = useMemo(() => {
    const uniqueInstallments = installments.filter((item, index, self) => 
      index === self.findIndex(t => t.id === item.id)
    );
    
    return uniqueInstallments.filter(item => {
      const matchesSearch = item.contract.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           item.name.toLowerCase().includes(searchTerm.toLowerCase());
      
      // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      const matchesContract = !selectedContractFilter || 
                             item.contract.toLowerCase().includes(selectedContractFilter.toLowerCase());
      
      // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ
      let matchesDate = true;
      if ((selectedMonth && selectedMonth !== '') || (selectedYear && selectedYear !== '')) {
        try {
          const itemDate = new Date(item.collectionDate);
          if (!isNaN(itemDate.getTime())) {
            const itemMonth = itemDate.getMonth() + 1;
            const itemYear = itemDate.getFullYear();
            
            let matchesMonth = true;
            let matchesYear = true;
            
            // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            if (selectedMonth && selectedMonth !== '') {
              matchesMonth = itemMonth === parseInt(selectedMonth);
            }
            
            // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏µ
            if (selectedYear && selectedYear !== '') {
              matchesYear = itemYear === parseInt(selectedYear);
            }
            
            matchesDate = matchesMonth && matchesYear;
          } else {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤)
            matchesDate = true;
          }
        } catch (error) {
          console.error('Error parsing date:', item.collectionDate, error);
          // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤)
          matchesDate = true;
        }
      }
      
      return matchesSearch && matchesDate && matchesContract;
    });
  }, [installments, searchTerm, selectedMonth, selectedYear, selectedContractFilter]);

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
  const { totalAmountToCollect, totalAmountCollected, totalRemainingDebt } = useMemo(() => {
    return {
      totalAmountToCollect: filteredData.reduce((sum, item) => sum + (item.amountToCollect || 0), 0),
      totalAmountCollected: filteredData.reduce((sum, item) => sum + (item.amountCollected || 0), 0),
      totalRemainingDebt: filteredData.reduce((sum, item) => sum + (item.remainingDebt || 0), 0)
    };
  }, [filteredData]);

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const sortedData = useMemo(() => {
    const uniqueFilteredData = filteredData.filter((item, index, self) => 
      index === self.findIndex(t => t.id === item.id)
    );
    
    return [...uniqueFilteredData].sort((a, b) => {
      let aValue = a[sortField];
      let bValue = b[sortField];

      if (sortField === 'sequence') {
        aValue = parseInt(aValue);
        bValue = parseInt(bValue);
      }

      if (sortDirection === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });
  }, [filteredData, sortField, sortDirection]);



  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleExport = useCallback(() => {
    try {
      const exportData = {
        checker: checker,
        summary: summary,
        installments: sortedData,
        exportDate: new Date().toLocaleDateString('th-TH'),
        totalAmountToCollect,
        totalAmountCollected,
        totalRemainingDebt
      };
      
      const dataStr = JSON.stringify(exportData, null, 2);
      const dataBlob = new Blob([dataStr], { type: 'application/json' });
      const url = URL.createObjectURL(dataBlob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `checker-report-${checker?.id}-${new Date().toISOString().split('T')[0]}.json`;
      link.click();
      URL.revokeObjectURL(url);
      
      toast({
        title: '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        description: '‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß',
      });
    } catch (error) {
      console.error('Error exporting data:', error);
      toast({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ',
        variant: 'destructive',
      });
    }
  }, [checker, summary, sortedData, totalAmountToCollect, totalAmountCollected, totalRemainingDebt]);

  if (!checker) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <AlertCircle className="w-16 h-16 text-gray-400 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏Å‡∏≠‡∏£‡πå</h2>
          <p className="text-gray-600 mb-4">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô</p>
          <Button onClick={onBack} variant="outline">
            <ArrowLeft className="w-4 h-4 mr-2" />
            ‡∏Å‡∏•‡∏±‡∏ö
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              <Button
                variant="ghost"
                size="sm"
                onClick={onBack}
                className="text-gray-600 hover:text-gray-900"
              >
                <ArrowLeft className="w-4 h-4 mr-2" />
                ‡∏Å‡∏•‡∏±‡∏ö
              </Button>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î</h1>
                <p className="text-sm text-gray-600">
                  ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏Å‡∏≠‡∏£‡πå: {checker?.name} {checker?.surname}
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              <Button 
                variant="outline" 
                size="sm"
                onClick={handleRefresh}
                disabled={loading}
              >
                <Loader2 className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
                ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
              </Button>
              <Button 
                variant="outline" 
                size="sm"
                onClick={handleExport}
                disabled={loading || sortedData.length === 0}
              >
                <Download className="w-4 h-4 mr-2" />
                ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
              </Button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Error State */}
        {error && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6"
          >
            <div className="flex items-center">
              <AlertCircle className="w-5 h-5 text-red-400 mr-3" />
              <div>
                <h3 className="text-sm font-medium text-red-800">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h3>
                <p className="text-sm text-red-700 mt-1">{error}</p>
              </div>
            </div>
          </motion.div>
        )}

        {/* Loading State */}
        {loading && (
          <div className="flex items-center justify-center py-20">
            <div className="text-center">
              <Loader2 className="w-12 h-12 text-blue-500 animate-spin mx-auto mb-4" />
              <p className="text-lg font-medium text-gray-900 mb-2">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
              <p className="text-sm text-gray-600">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà</p>
            </div>
          </div>
        )}

        {/* Content */}
        {!loading && (
          <>
            {/* Summary Cards */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.1 }}
              className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-12"
            >
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤</p>
                    <p className="text-2xl font-bold text-gray-900">{filteredData.length}</p>
                  </div>
                  <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                    <FileText className="w-6 h-6 text-blue-600" />
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö</p>
                    <p className="text-2xl font-bold text-orange-600">‡∏ø{totalAmountToCollect.toLocaleString()}</p>
                  </div>
                  <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
                    <DollarSign className="w-6 h-6 text-orange-600" />
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ</p>
                    <p className="text-2xl font-bold text-green-600">‡∏ø{totalAmountCollected.toLocaleString()}</p>
                  </div>
                  <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                    <TrendingUp className="w-6 h-6 text-green-600" />
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-600">‡∏•‡∏π‡∏Å‡∏´‡∏ô‡∏µ‡πâ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</p>
                    <p className="text-2xl font-bold text-red-600">‡∏ø{totalRemainingDebt.toLocaleString()}</p>
                  </div>
                  <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
                    <Calendar className="w-6 h-6 text-red-600" />
                  </div>
                </div>
              </div>
            </motion.div>

            {/* Search and Filter */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8"
            >
              {/* Filter Status */}
              {(selectedMonth || selectedYear || selectedContractFilter) && (
                <div className="mb-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
                  <div className="flex items-center gap-2 text-sm text-blue-700">
                    <Filter className="w-4 h-4" />
                    <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</span>
                    {selectedMonth && (
                      <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded">
                        ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {selectedMonth}
                      </span>
                    )}
                    {selectedYear && (
                      <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded">
                        ‡∏õ‡∏µ {selectedYear}
                      </span>
                    )}
                    {selectedContractFilter && (
                      <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded">
                        ‡∏™‡∏±‡∏ç‡∏ç‡∏≤ {selectedContractFilter}
                      </span>
                    )}
                    <span className="text-blue-600">
                      (‡πÅ‡∏™‡∏î‡∏á {filteredData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {installments.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
                    </span>
                  </div>
                </div>
              )}
              
              <div className="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0 md:space-x-4">
                {/* Search */}
                <div className="flex-1 max-w-md">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                    <input
                      type="text"
                      placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏ç‡∏ç‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                </div>

                {/* Month and Year Filter */}
                <div className="flex items-center space-x-4">
                  <div className="flex items-center space-x-2">
                    <Filter className="w-4 h-4 text-gray-400" />
                    <select
                      value={selectedMonth}
                      onChange={(e) => setSelectedMonth(e.target.value)}
                      className="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="">‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
                      <option value="1">‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°</option>
                      <option value="2">‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå</option>
                      <option value="3">‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°</option>
                      <option value="4">‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô</option>
                      <option value="5">‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°</option>
                      <option value="6">‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô</option>
                      <option value="7">‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°</option>
                      <option value="8">‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°</option>
                      <option value="9">‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô</option>
                      <option value="10">‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°</option>
                      <option value="11">‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô</option>
                      <option value="12">‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°</option>
                    </select>
                    <select
                      value={selectedYear}
                      onChange={(e) => setSelectedYear(e.target.value)}
                      className="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="">‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ</option>
                      <option value="2024">2024</option>
                      <option value="2023">2023</option>
                      <option value="2022">2022</option>
                      <option value="2021">2021</option>
                      <option value="2020">2020</option>
                      <option value="2019">2019</option>
                      <option value="2018">2018</option>
                      <option value="2017">2017</option>
                      <option value="2016">2016</option>
                      <option value="2015">2015</option>
                    </select>
                  </div>
                  
                  {/* Contract Filter */}
                  {selectedContractFilter && (
                    <div className="flex items-center space-x-2">
                      <span className="text-sm text-gray-600">‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤:</span>
                      <span className="px-2 py-1 bg-blue-100 text-blue-800 text-sm font-medium rounded-md">
                        {selectedContractFilter}
                      </span>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setSelectedContractFilter('')}
                        className="text-red-600 border-red-200 hover:bg-red-50 hover:border-red-300"
                      >
                        ‡∏•‡πâ‡∏≤‡∏á
                      </Button>
                    </div>
                  )}
                  
                  {/* Clear All Filters */}
                  {(selectedMonth || selectedYear || selectedContractFilter) && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setSelectedMonth('');
                        setSelectedYear('');
                        setSelectedContractFilter('');
                      }}
                      className="text-gray-600 border-gray-300 hover:bg-gray-50 hover:border-gray-400"
                    >
                      ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    </Button>
                  )}
                </div>
              </div>
            </motion.div>

            {/* Monthly View */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
              className="space-y-6 mb-12"
            >
              {Object.keys(monthlyData).length === 0 ? (
                <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-8 text-center">
                  <Calendar className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h3>
                  <p className="text-gray-600">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ</p>
                </div>
              ) : (
                Object.entries(monthlyData)
                  .filter(([monthKey, monthData]) => {
                    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏µ‡πÉ‡∏î‡πÜ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                    if ((!selectedMonth || selectedMonth === '') && (!selectedYear || selectedYear === '')) return true;
                    
                    // ‡πÅ‡∏¢‡∏Å‡∏õ‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å monthKey (format: YYYY-MM)
                    const [yearFromKey, monthFromKey] = monthKey.split('-');
                    
                    let matchesMonth = true;
                    let matchesYear = true;
                    
                    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                    if (selectedMonth && selectedMonth !== '') {
                      matchesMonth = monthFromKey === selectedMonth.padStart(2, '0');
                    }
                    
                    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏µ
                    if (selectedYear && selectedYear !== '') {
                      matchesYear = yearFromKey === selectedYear;
                    }
                    
                    return matchesMonth && matchesYear;
                  })
                  .map(([monthKey, monthData]) => (
                    <div key={monthKey} className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                      <div className="px-6 py-4 bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-gray-200">
                        <div className="flex items-center justify-between">
                          <div>
                            <h3 className="text-lg font-semibold text-gray-900">{monthData.monthName}</h3>
                            <p className="text-sm text-gray-600">
                              {monthData.installments.length} ‡∏™‡∏±‡∏ç‡∏ç‡∏≤ | 
                              ‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö: ‡∏ø{monthData.totalAmount.toLocaleString()} | 
                              ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ: ‡∏ø{monthData.totalCollected.toLocaleString()} | 
                              ‡∏¢‡∏≠‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ú‡πà‡∏≠‡∏ô: ‡∏ø{monthData.totalRemaining.toLocaleString()}
                            </p>
                          </div>
                          <div className="flex items-center space-x-2">
                            <span className="px-3 py-1 bg-blue-100 text-blue-800 text-sm font-medium rounded-full">
                              {monthData.installments.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                            </span>
                          </div>
                        </div>
                      </div>
                      
                      <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-200">
                          <thead className="bg-gray-50">
                            <tr>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                ‡∏•‡∏≥‡∏î‡∏±‡∏ö
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                ‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div className="text-center">
                                  <div className="text-blue-600 font-bold">‡∏ô‡∏±‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏ß</div>
                                  <div className="text-xs text-gray-500">‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô</div>
                                </div>
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div className="text-center">
                                  <div className="text-red-600 font-bold">‡∏ô‡∏±‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏ß</div>
                                  <div className="text-xs text-gray-500">‡πÅ‡∏î‡∏á</div>
                                </div>
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div className="text-center">
                                  <div className="text-black font-bold">P</div>
                                  <div className="text-xs text-gray-500">‡∏î‡∏≥</div>
                                </div>
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div className="text-center">
                                  <div className="text-red-600 font-bold">P</div>
                                  <div className="text-xs text-gray-500">‡πÅ‡∏î‡∏á</div>
                                </div>
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                <div className="text-center">
                                  <div className="text-blue-600 font-bold">P</div>
                                  <div className="text-xs text-gray-500">‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô</div>
                                </div>
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                ‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ
                              </th>
                              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                ‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                              </th>

                            </tr>
                          </thead>
                          <tbody className="bg-white divide-y divide-gray-200">
                            {monthData.installments.map((item, index) => (
                              <tr key={item.id} className="hover:bg-gray-50">
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                  {index + 1}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-600">
                                  {item.contract}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                  {item.name || '-'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                  {item.collectionDate}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-blue-600 text-center font-medium">
                                  {item.napheoBlue > 0 ? item.napheoBlue : '-'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-red-600 text-center font-medium">
                                  {item.napheoRed > 0 ? item.napheoRed : '-'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-center">
                                  {item.pBlack && item.pBlack !== 0 ? (
                                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-black text-white">
                                      {item.pBlack}
                                    </span>
                                  ) : '-'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-center">
                                  {item.pRed > 0 ? (
                                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                      P
                                    </span>
                                  ) : '-'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-center">
                                  {item.pBlue && item.pBlue !== 0 ? (
                                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                      {item.pBlue}
                                    </span>
                                  ) : '-'}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-orange-600">
                                  ‡∏ø{item.amountToCollect.toLocaleString()}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-green-600">
                                  ‡∏ø{item.amountCollected.toLocaleString()}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-red-600">
                                  ‡∏ø{item.remainingDebt.toLocaleString()}
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  ))
              )}
            </motion.div>

            {/* Summary Data Table */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
              className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden mb-8"
            >
              <div className="px-6 py-4 bg-gray-50 border-b border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900">‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</h3>
              </div>
              <div className="p-6">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                  {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î */}
                  <div className="space-y-3">
                    <h4 className="font-medium text-gray-700 text-sm">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
                        <span className="text-sm font-medium">{summary.totalCards || 0} ‡πÉ‡∏ö</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö:</span>
                        <span className="text-sm font-medium">{summary.cardsToCollect || 0} ‡πÉ‡∏ö</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ:</span>
                        <span className="text-sm font-medium">{summary.cardsCollected || 0} ‡πÉ‡∏ö</span>
                      </div>
                    </div>
                  </div>

                  {/* P ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß */}
                  <div className="space-y-3">
                    <h4 className="font-medium text-gray-700 text-sm">P ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">P ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß:</span>
                        <span className="text-sm font-medium text-green-600">{summary.pGreen || 0} ‡πÉ‡∏ö</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">P ‡πÅ‡∏î‡∏á:</span>
                        <span className="text-sm font-medium text-red-600">{summary.pRed || 0} ‡πÉ‡∏ö</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
                        <span className="text-sm font-medium">{summary.totalPCards || 0} ‡πÉ‡∏ö</span>
                      </div>
                    </div>
                  </div>

                  {/* P ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ */}
                  <div className="space-y-3">
                    <h4 className="font-medium text-gray-700 text-sm">P ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">P ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ:</span>
                        <span className="text-sm font-medium text-green-600">{summary.pGreenCollected || 0} ‡πÉ‡∏ö</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">P ‡πÅ‡∏î‡∏á ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ:</span>
                        <span className="text-sm font-medium text-red-600">{summary.pRedCollected || 0} ‡πÉ‡∏ö</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ:</span>
                        <span className="text-sm font-medium">{summary.totalPCardsCollected || 0} ‡πÉ‡∏ö</span>
                      </div>
                    </div>
                  </div>

                  {/* ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô */}
                  <div className="space-y-3">
                    <h4 className="font-medium text-gray-700 text-sm">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</h4>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
                        <span className="text-sm font-medium">‡∏ø{(summary.totalMoney || 0).toLocaleString()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠:</span>
                        <span className="text-sm font-medium">‡∏ø{(summary.moneyToCollect || 0).toLocaleString()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ:</span>
                        <span className="text-sm font-medium">‡∏ø{(summary.moneyCollected || 0).toLocaleString()}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          </>
        )}
      </div>
    </div>
  );
};

export default CheckerInstallmentReport; 